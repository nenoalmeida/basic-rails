MODEL VIEW CONTROLLER

Model–view–controller (MVC) is a software architectural pattern for implementing user interfaces on computers. 
It divides a given software application into three interconnected parts, so as to separate internal representations of 
information from the ways that information is presented to or accepted from the user.

Traditionally used for desktop graphical user interfaces (GUIs), this architecture has become extremely popular for
designing web applications.

As with other software patterns, MVC expresses the "core of the solution" to a problem while allowing it to be adapted
for each system. Particular MVC architectures can vary significantly from the traditional description here.

Components
A typical collaboration of the MVC components.

The central component of MVC, the model, captures the behavior of the application in terms of its problem domain, 
independent of the user interface.

The following description are abstracts from the w3school.

Model - The model is the part of the application that handles the logic for the application data.

View -	The View is the parts of the application that handle the display of the data.

Controller -	The Controller is the part of the application that handles user interaction.


Interactions

In addition to dividing the application into three kinds of components, the model–view–controller design defines the 
interactions between them.

    A model stores data that is retrieved according to commands from the controller and displayed in the view.
    
    A view generates an output presentation to the user based on changes in the model.
    
    A controller can send commands to the model to update the model's state (e.g. editing a document). It can also send 
    commands to its associated view to change the view's presentation of the model (e.g. by scrolling through a document).
    
    
History

MVC was one of the seminal insights in the early development of graphical user interfaces, and one of the first approaches to describe and implement software constructs in terms of their responsibilities.[8]

Trygve Reenskaug introduced MVC into Smalltalk-76 while visiting the Xerox Palo Alto Research Center (PARC)[9][10] in the 1970s. In the 1980s, Jim Althoff and others implemented a version of MVC for the Smalltalk-80 class library. It was only later, in a 1988 article in The Journal of Object Technology (JOT), that MVC was expressed as a general concept.[11]

The MVC pattern has subsequently evolved,[12] giving rise to variants such as hierarchical model–view–controller (HMVC), model–view–adapter (MVA), model–view–presenter (MVP), model–view–viewmodel (MVVM), and others that adapted MVC to different contexts.

The use of the MVC pattern in web applications exploded in popularity after the introduction of Apple's WebObjects which was originally written in Objective-C (that borrowed heavily from Smalltalk) and helped enforce MVC principles. Later, the MVC pattern became popular with Java developers when WebObjects was ported to Java. Later frameworks for Java such as Spring continued the strong bond between Java and MVC. The introduction of the frameworks Rails (for Ruby) and Django (for Python), both of which had a strong emphasis on rapid deployment, increased MVCs popularity outside the traditional enterprise environment in which it has long been popular. MVC web frameworks now hold large market shares relative to non-MVC web toolkits.[13]    

